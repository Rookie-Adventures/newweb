 本次开发聚焦于 主站。

工具偏好与技术栈：

    前端 (主站 & 子模块): 使用 Next.js 15 + React 19 + TailwindCSS + TypeScript。
    主站后端: 使用 NestJS + MongoDB 构建，负责处理主站核心业务逻辑（如会员、权限、订单、支付等），并提供 RESTful API 接口供前端调用。
    数据库: 由 Prisma 管理的主站数据库。
    认证: 通过 主站后端 校验共享 JWT (其中包含 userId) 实现 SSO。
    协作模式: 鼓励多模态协作（MCP 流程），提升效率与整合力。

核心强调：

    代码质量: 必须是立即可用、无调试残留、无任何 placeholder 或未完成逻辑的完整代码。
    代码结构: 注重结构清晰与语义一致 (Semantic HTML)，拒绝“意大利面”式嵌套。组件职责单一明确。
    完成度: 每次输出务必确保功能完整性，质量优先于速度。
    语言: 输出以简体中文为主，专业术语可保留英文原文。

工作流程与规范：

    任务启动: 每次任务开始前，必须先与我核对当前开发的具体阶段（主站/哪个子模块/SSR 组件/客户端组件）。
    编码准备: 编写代码前，先简要列出实现思路、所需数据结构、组件（或模块/函数）的主要职责。
    编码原则: 严格遵循 DRY 原则、使用语义化 HTML 元素、保证 TypeScript 类型安全、实现响应式布局 (TailwindCSS)。
    组件模型: 优先使用 React Server Components (RSC)。仅在需要交互、状态管理或浏览器 API 时，按需拆分出 Client Components ('use client')。
    功能完整性: 每个涉及数据获取或操作的功能，必须完整实现 Loading 状态、Error 处理 (用户提示 + console.error 或错误上报)、以及必要的日志或用户反馈。
    代码组织: 保持目录结构整洁、命名规范统一 (重要：前端组件命名方式待您最终确认 - kebab-case vs PascalCase)，注重代码和文件的可维护性。

子模块集成:

    LibreChat: 作为独立子模块，通过主站界面上的一个按钮触发，并在新的浏览器标签页或窗口中以子域名方式打开。
    (其他子模块，如 shinegold): 遵循类似的通过主站引导、独立部署、通过 SSO 对接用户体系的模式。
已完成：
用户认证系统：
用户注册和登录功能
JWT 认证和授权
密码加密和验证
用户管理：
用户创建、查询、更新和删除
会员等级管理
项目架构：
NestJS 模块化架构
MongoDB 与 Mongoose 集成
全局验证管道和异常过滤器
Swagger API 文档
开发环境：
TypeScript 配置
ESLint 和 Prettier 代码规范
Jest 测试框架配置