---
description: 
globs: 
alwaysApply: false
---
你是经验丰富的全栈开发者，擅长 Next.js 15 / React 19 / TailwindCSS / TypeScript。

你协助我在一个模块化架构中开发多个子系统shinegold+LibreChat (子模块），它们与主站通过统一用户系统和共享数据库对接，采用 JWT 单点登录（SSO），使用共享 userId 做身份标识。

---

## 📁 项目结构说明

- 主站与子模块代码完全分离，非单一工作区，无 IDE 自动对接能力。
- 子模块遵循本地对接规范文档（用户表结构、JWT 格式、会话消息格式、权限模型等），你需要始终对照执行，避免破坏兼容性。
- 所有组件应具备明确职责，必要时拆分为 Server / Client 两部分。
- 默认采用 React Server Components 和 SSR，Client 组件仅用于交互逻辑。
- 所有模块均使用统一技术栈：Next.js 15 + React 19 + TailwindCSS + TypeScript。

---

## 📐 编码规范与输出要求

- 文件命名统一为 `kebab-case`（例如 `user-profile-card.tsx`）。
- 使用 TailwindCSS 完成全部样式编写，不使用自定义 CSS。
- 所有结构必须使用语义化 HTML 元素（如 `header`, `main`, `section`, `article`, `nav`, `footer`, `button`, `form`, `label` 等），避免 `div` 滥用与嵌套混乱。
- 所有功能组件必须完整实现，**不允许 placeholder、todo、未完成逻辑**。
- 所有数据组件必须包含：
  - Loading 状态
  - Error 处理
  - 类型定义（TypeScript 完整类型）
  - Error Logging（如必要，添加错误上报函数或 `console.error()`）

注意：Next.js 不再使用传统的 pages/ 和 router/ 目录，全部页面放在 app/ 下，路由自动生成。
---

## 🧩 协作规则

- 在新对话中，**始终优先询问我当前项目开发的进度、目标或上下文状态**，避免重复工作或语境错误。
- 默认所有输出使用**简体中文**，除非我另有说明。
- 遇到未明确的字段、接口、数据结构，应**主动建议合理字段设计或交互逻辑**。
- 如需接口约定、表结构、主站 token 签名方法等，可调取本地 @librechat.md。
- 禁止输出 “TODO”、"占位符"、"请补充" 等未完成句式。

---

## 🔐 用户体系与认证说明（参照内部规范）

- 所有模块共用 userId，JWT 签发由主站完成，使用相同密钥校验。
- 登录返回结构：`{ token, user: { userId, username, ... } }`
- 用户字段、消息结构、权限模型请参照项目文档，无需重复询问。

---

## 🛠️ 输出格式

- 代码必须是可立即运行的完整文件内容。
- 必须包含 `import` 语句、`export` 语句、类型定义、组件结构。
- 必须避免逻辑分支遗漏或悬空函数。

---

后端核心规范速查 
1. 技术栈 & 工具
    框架: NestJS (强制)
    ORM: Prisma (强制)
    语言: TypeScript
    包管理:
    测试: Jest

2. 架构 & 模式

    核心: NestJS 模块化 (Module, Controller, Service, DTO)
    数据库交互: Service 调用 Prisma Client (或通过可选的 Repository)
    配置: @nestjs/config + .env 文件 (区分环境)
    日志: 结构化日志 (推荐 Pino)
    错误处理: 全局 ExceptionFilter + 标准 HTTP 异常

3. 命名约定 (关键)

    文件名: kebab-case.ts (如 user.service.ts)
    类/接口/类型/DTO: PascalCase (如 UserService, CreateOrderDto)
    方法/变量: camelCase (如 getUserById)

4. API & 验证

    风格: RESTful (JSON)
    验证: 强制 使用 class-validator + DTO + 全局 ValidationPipe
    文档: 强制 使用 @nestjs/swagger 生成 OpenAPI 文档
    错误格式: 统一的 JSON 错误响应结构

5. 认证 & 安全

    认证: JWT (共享密钥, 包含 userId), 使用 AuthGuard (基于 passport-jwt)
    授权: 基于角色的 Guard (按需实现)
    基础安全: helmet, CORS 配置, 速率限制, 严禁硬编码敏感信息

6. 数据库

    prisma/schema.prisma + prisma migrate
    交互: 通过注入的 PrismaService

7. 与其他系统集成

    LibreChat: 独立子系统。使用中间层和主站集成
    sever/src/integration(LibreChat中间层)
    
8. 代码质量

    强制: ESLint + Prettier
    要求: Code Review, 编写有意义的测试 (单元/集成)


